VERSION = 3<br/>PATCHLEVEL = 18<br/>SUBLEVEL = 41<br/>EXTRAVERSION =<br/>NAME = Diseased Newt<div></div># *DOCUMENTATION*<br/># To see a list of typical targets execute "make help"<br/># More info can be located in ./README<br/># Comments in this file are targeted only to the developer, do not<br/># expect to learn how to build the kernel reading this file.<div></div># Do not use make's built-in rules and variables<br/># (this increases performance and avoids hard-to-debug behaviour);<br/>MAKEFLAGS += -rR<div></div># Avoid funny character set dependencies<br/>unexport LC_ALL<br/>LC_COLLATE=C<br/>LC_NUMERIC=C<br/>export LC_COLLATE LC_NUMERIC<div></div># Avoid interference with shell env settings<br/>unexport GREP_OPTIONS<div></div># We are using a recursive build, so we need to do a little thinking<br/># to get the ordering right.<br/>#<br/># Most importantly: sub-Makefiles should only ever modify files in<br/># their own directory. If in some directory we have a dependency on<br/># a file in another dir (which doesn't happen often, but it's often<br/># unavoidable when linking the built-in.o targets which finally<br/># turn into vmlinux), we will call a sub make in that other dir, and<br/># after that we are sure that everything which is in that other dir<br/># is now up to date.<br/>#<br/># The only cases where we need to modify files which have global<br/># effects are thus separated out and done before the recursive<br/># descending is started. They are now explicitly listed as the<br/># prepare rule.<div></div># Beautify output<br/># ---------------------------------------------------------------------------<br/>#<br/># Normally, we echo the whole command before executing it. By making<br/># that echo $($(quiet)$(cmd)), we now have the possibility to set<br/># $(quiet) to choose other forms of output instead, e.g.<br/>#<br/># quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@<br/># cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<br/>#<br/># If $(quiet) is empty, the whole command will be printed.<br/># If it is set to "quiet_", only the short version will be printed.<br/># If it is set to "silent_", nothing will be printed at all, since<br/># the variable $(silent_cmd_cc_o_c) doesn't exist.<br/>#<br/># A simple variant is to prefix commands with $(Q) - that's useful<br/># for commands that shall be hidden in non-verbose mode.<br/>#<br/>#	$(Q)ln $@ :<br/>#<br/># If KBUILD_VERBOSE equals 0 then the above command will be hidden.<br/># If KBUILD_VERBOSE equals 1 then the above command is displayed.<br/>#<br/># To put more focus on warnings, be less verbose as default<br/># Use 'make V=1' to see the full commands<div></div>ifeq ("$(origin V)", "command line")<br/>KBUILD_VERBOSE = $(V)<br/>endif<br/>ifndef KBUILD_VERBOSE<br/>KBUILD_VERBOSE = 0<br/>endif<div></div>ifeq ($(KBUILD_VERBOSE),1)<br/>quiet =<br/>Q =<br/>else<br/>quiet=quiet_<br/>Q = @<br/>endif<div></div># If the user is running make -s (silent mode), suppress echoing of<br/># commands<div></div>ifneq ($(filter 4.%,$(MAKE_VERSION)),)	# make-4<br/>ifneq ($(filter %s ,$(firstword x$(MAKEFLAGS))),)<br/>quiet=silent_<br/>endif<br/>else					# make-3.8x<br/>ifneq ($(filter s% -s%,$(MAKEFLAGS)),)<br/>quiet=silent_<br/>endif<br/>endif<div></div>export quiet Q KBUILD_VERBOSE<div></div># kbuild supports saving output files in a separate directory.<br/># To locate output files in a separate directory two syntaxes are supported.<br/># In both cases the working directory must be the root of the kernel src.<br/># 1) O=<br/># Use "make O=dir/to/store/output/files/"<br/>#<br/># 2) Set KBUILD_OUTPUT<br/># Set the environment variable KBUILD_OUTPUT to point to the directory<br/># where the output files shall be placed.<br/># export KBUILD_OUTPUT=dir/to/store/output/files/<br/># make<br/>#<br/># The O= assignment takes precedence over the KBUILD_OUTPUT environment<br/># variable.<div></div># KBUILD_SRC is set on invocation of make in OBJ directory<br/># KBUILD_SRC is not intended to be used by the regular user (for now)<br/>ifeq ($(KBUILD_SRC),)<div></div># OK, Make called in directory where kernel src resides<br/># Do we want to locate output files in a separate directory?<br/>ifeq ("$(origin O)", "command line")<br/>KBUILD_OUTPUT := $(O)<br/>endif<div></div># That's our default target when none is given on the command line<br/>PHONY := _all<br/>_all:<div></div># Cancel implicit rules on top Makefile<br/>$(CURDIR)/Makefile Makefile: ;<div></div>ifneq ($(KBUILD_OUTPUT),)<br/># Invoke a second make in the output directory, passing relevant variables<br/># check that the output directory actually exists<br/>saved-output := $(KBUILD_OUTPUT)<br/>KBUILD_OUTPUT := $(shell mkdir -p $(KBUILD_OUTPUT) && cd $(KBUILD_OUTPUT) \<br/>								&& /bin/pwd)<br/>$(if $(KBUILD_OUTPUT),, \<br/>$(error failed to create output directory "$(saved-output)"))<div></div>PHONY += $(MAKECMDGOALS) sub-make<div></div>$(filter-out _all sub-make $(CURDIR)/Makefile, $(MAKECMDGOALS)) _all: sub-make<br/>	@:<div></div>sub-make: FORCE<br/>	$(Q)$(MAKE) -C $(KBUILD_OUTPUT) KBUILD_SRC=$(CURDIR) \<br/>	-f $(CURDIR)/Makefile $(filter-out _all sub-make,$(MAKECMDGOALS))<div></div># Leave processing to above invocation of make<br/>skip-makefile := 1<br/>endif # ifneq ($(KBUILD_OUTPUT),)<br/>endif # ifeq ($(KBUILD_SRC),)<div></div># We process the rest of the Makefile if this is the final invocation of make<br/>ifeq ($(skip-makefile),)<div></div># Do not print "Entering directory ...",<br/># but we want to display it when entering to the output directory<br/># so that IDEs/editors are able to understand relative filenames.<br/>MAKEFLAGS += --no-print-directory<div></div># Call a source code checker (by default, "sparse") as part of the<br/># C compilation.<br/>#<br/># Use 'make C=1' to enable checking of only re-compiled files.<br/># Use 'make C=2' to enable checking of *all* source files, regardless<br/># of whether they are re-compiled or not.<br/>#<br/># See the file "Documentation/sparse.txt" for more details, including<br/># where to get the "sparse" utility.<div></div>ifeq ("$(origin C)", "command line")<br/>KBUILD_CHECKSRC = $(C)<br/>endif<br/>ifndef KBUILD_CHECKSRC<br/>KBUILD_CHECKSRC = 0<br/>endif<div></div># Use make M=dir to specify directory of external module to build<br/># Old syntax make ... SUBDIRS=$PWD is still supported<br/># Setting the environment variable KBUILD_EXTMOD take precedence<br/>ifdef SUBDIRS<br/>KBUILD_EXTMOD ?= $(SUBDIRS)<br/>endif<div></div>ifeq ("$(origin M)", "command line")<br/>KBUILD_EXTMOD := $(M)<br/>endif<div></div># If building an external module we do not care about the all: rule<br/># but instead _all depend on modules<br/>PHONY += all<br/>ifeq ($(KBUILD_EXTMOD),)<br/>_all: all<br/>else<br/>_all: modules<br/>endif<div></div>ifeq ($(KBUILD_SRC),)<br/># building in the source tree<br/>srctree := .<br/>else<br/>ifeq ($(KBUILD_SRC)/,$(dir $(CURDIR)))<br/># building in a subdirectory of the source tree<br/>srctree := ..<br/>else<br/>srctree := $(KBUILD_SRC)<br/>endif<br/>endif<br/>objtree		:= .<br/>src		:= $(srctree)<br/>obj		:= $(objtree)<div></div>VPATH		:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))<div></div>export srctree objtree VPATH<div></div><br/># SUBARCH tells the usermode build what the underlying arch is. That is set<br/># first, and if a usermode build is happening, the "ARCH=um" on the command<br/># line overrides the setting of ARCH below. If a native build is happening,<br/># then ARCH is assigned, getting whatever value it gets normally, and<br/># SUBARCH is subsequently ignored.<div></div>SUBARCH := $(shell uname -m | sed -e s/i.86/x86/ -e s/x86_64/x86/ \<br/>				 -e s/sun4u/sparc64/ \<br/>				 -e s/arm.*/arm/ -e s/sa110/arm/ \<br/>				 -e s/s390x/s390/ -e s/parisc64/parisc/ \<br/>				 -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \<br/>				 -e s/sh[234].*/sh/ -e s/aarch64.*/arm64/ )<div></div># Cross compiling and selecting different set of gcc/bin-utils<br/># ---------------------------------------------------------------------------<br/>#<br/># When performing cross compilation for other architectures ARCH shall be set<br/># to the target architecture. (See arch/* for the possibilities).<br/># ARCH can be set during invocation of make:<br/># make ARCH=ia64<br/># Another way is to have ARCH set in the environment.<br/># The default ARCH is the host where make is executed.<div></div># CROSS_COMPILE specify the prefix used for all executables used<br/># during compilation. Only gcc and related bin-utils executables<br/># are prefixed with $(CROSS_COMPILE).<br/># CROSS_COMPILE can be set on the command line<br/># make CROSS_COMPILE=ia64-linux-<br/># Alternatively CROSS_COMPILE can be set in the environment.<br/># A third alternative is to store a setting in .config so that plain<br/># "make" in the configured kernel build directory always uses that.<br/># Default value for CROSS_COMPILE is not to prefix executables<br/># Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile<br/>ARCH		?= $(SUBARCH)<br/>CROSS_COMPILE	?= $(CONFIG_CROSS_COMPILE:"%"=%)<div></div># Architecture as present in compile.h<br/>UTS_MACHINE 	:= $(ARCH)<br/>SRCARCH 	:= $(ARCH)<div></div># Additional ARCH settings for x86<br/>ifeq ($(ARCH),i386)<br/>SRCARCH := x86<br/>endif<br/>ifeq ($(ARCH),x86_64)<br/>SRCARCH := x86<br/>endif<div></div># Additional ARCH settings for sparc<br/>ifeq ($(ARCH),sparc32)<br/>SRCARCH := sparc<br/>endif<br/>ifeq ($(ARCH),sparc64)<br/>SRCARCH := sparc<br/>endif<div></div># Additional ARCH settings for sh<br/>ifeq ($(ARCH),sh64)<br/>SRCARCH := sh<br/>endif<div></div># Additional ARCH settings for tile<br/>ifeq ($(ARCH),tilepro)<br/>SRCARCH := tile<br/>endif<br/>ifeq ($(ARCH),tilegx)<br/>SRCARCH := tile<br/>endif<div></div># Where to locate arch specific headers<br/>hdr-arch := $(SRCARCH)<div></div>KCONFIG_CONFIG	?= .config<br/>export KCONFIG_CONFIG<div></div># SHELL used by kbuild<br/>CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \<br/>	 else if [ -x /bin/bash ]; then echo /bin/bash; \<br/>	 else echo sh; fi ; fi)<div></div>HOSTCC = gcc<br/>HOSTCXX = g++<br/>HOSTCFLAGS = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu89<br/>HOSTCXXFLAGS = -O2<div></div>ifeq ($(shell $(HOSTCC) -v 2>&1 | grep -c "clang version"), 1)<br/>HOSTCFLAGS += -Wno-unused-value -Wno-unused-parameter \<br/>		-Wno-missing-field-initializers -fno-delete-null-pointer-checks<br/>endif<div></div># Decide whether to build built-in, modular, or both.<br/># Normally, just do built-in.<div></div>KBUILD_MODULES :=<br/>KBUILD_BUILTIN := 1<div></div># If we have only "make modules", don't compile built-in objects.<br/># When we're building modules with modversions, we need to consider<br/># the built-in objects during the descend as well, in order to<br/># make sure the checksums are up to date before we record them.<div></div>ifeq ($(MAKECMDGOALS),modules)<br/>KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)<br/>endif<div></div># If we have "make modules", compile modules<br/># in addition to whatever we do anyway.<br/># Just "make" or "make all" shall build modules as well<div></div>ifneq ($(filter all _all modules,$(MAKECMDGOALS)),)<br/>KBUILD_MODULES := 1<br/>endif<div></div>ifeq ($(MAKECMDGOALS),)<br/>KBUILD_MODULES := 1<br/>endif<div></div>export KBUILD_MODULES KBUILD_BUILTIN<br/>export KBUILD_CHECKSRC KBUILD_SRC KBUILD_EXTMOD<div></div>ifneq ($(CC),)<br/>ifeq ($(shell $(CC) -v 2>&1 | grep -c "clang version"), 1)<br/>COMPILER := clang<br/>else<br/>COMPILER := gcc<br/>endif<br/>export COMPILER<br/>endif<div></div># Look for make include files relative to root of kernel src<br/>MAKEFLAGS += --include-dir=$(srctree)<div></div># We need some generic definitions (do not try to remake the file).<br/>$(srctree)/scripts/Kbuild.include: ;<br/>include $(srctree)/scripts/Kbuild.include<div></div># Make variables (CC, etc...)<br/>AS		= $(CROSS_COMPILE)as<br/>LD		= $(CROSS_COMPILE)ld<br/>CC		= $(CROSS_COMPILE)gcc<br/>CPP		= $(CC) -E<br/>AR		= $(CROSS_COMPILE)ar<br/>NM		= $(CROSS_COMPILE)nm<br/>STRIP		= $(CROSS_COMPILE)strip<br/>OBJCOPY		= $(CROSS_COMPILE)objcopy<br/>OBJDUMP		= $(CROSS_COMPILE)objdump<br/>AWK		= awk<br/>GENKSYMS	= scripts/genksyms/genksyms<br/>INSTALLKERNEL := installkernel<br/>DEPMOD		= /sbin/depmod<br/>PERL		= perl<br/>PYTHON		= python<br/>CHECK		= sparse<div></div>CHECKFLAGS := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \<br/>		 -Wbitwise -Wno-return-void $(CF)<br/>CFLAGS_MODULE =<br/>AFLAGS_MODULE =<br/>LDFLAGS_MODULE =<br/>CFLAGS_KERNEL	=<br/>AFLAGS_KERNEL	=<br/>CFLAGS_GCOV	= -fprofile-arcs -ftest-coverage -fno-tree-loop-im<div></div><br/># Use USERINCLUDE when you must reference the UAPI directories only.<br/>USERINCLUDE := \<br/>		-I$(srctree)/arch/$(hdr-arch)/include/uapi \<br/>		-Iarch/$(hdr-arch)/include/generated/uapi \<br/>		-I$(srctree)/include/uapi \<br/>		-Iinclude/generated/uapi \<br/>-include $(srctree)/include/linux/kconfig.h<div></div># Use LINUXINCLUDE when you must reference the include/ directory.<br/># Needed to be compatible with the O= option<br/>LINUXINCLUDE := \<br/>		-I$(srctree)/arch/$(hdr-arch)/include \<br/>		-Iarch/$(hdr-arch)/include/generated \<br/>		$(if $(KBUILD_SRC), -I$(srctree)/include) \<br/>		-Iinclude \<br/>		$(USERINCLUDE)<div></div>KBUILD_CPPFLAGS := -D__KERNEL__<div></div>KBUILD_CFLAGS := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \<br/>		 -fno-strict-aliasing -fno-common \<br/>		 -Wno-format-security \<br/>		 -std=gnu89<div></div>KBUILD_AFLAGS_KERNEL :=<br/>KBUILD_CFLAGS_KERNEL :=<br/>KBUILD_AFLAGS := -D__ASSEMBLY__<br/>KBUILD_AFLAGS_MODULE := -DMODULE<br/>KBUILD_CFLAGS_MODULE := -DMODULE<br/>KBUILD_LDFLAGS_MODULE := -T $(srctree)/scripts/module-common.lds<div></div># Read KERNELRELEASE from include/config/kernel.release (if it exists)<br/>KERNELRELEASE = $(shell cat include/config/kernel.release 2> /dev/null)<br/>KERNELVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)<div></div>export VERSION PATCHLEVEL SUBLEVEL KERNELRELEASE KERNELVERSION<br/>export ARCH SRCARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC<br/>export CPP AR NM STRIP OBJCOPY OBJDUMP<br/>export MAKE AWK GENKSYMS INSTALLKERNEL PERL PYTHON UTS_MACHINE<br/>export HOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS<div></div>export KBUILD_CPPFLAGS NOSTDINC_FLAGS LINUXINCLUDE OBJCOPYFLAGS LDFLAGS<br/>export KBUILD_CFLAGS CFLAGS_KERNEL CFLAGS_MODULE CFLAGS_GCOV<br/>export KBUILD_AFLAGS AFLAGS_KERNEL AFLAGS_MODULE<br/>export KBUILD_AFLAGS_MODULE KBUILD_CFLAGS_MODULE KBUILD_LDFLAGS_MODULE<br/>export KBUILD_AFLAGS_KERNEL KBUILD_CFLAGS_KERNEL<br/>export KBUILD_ARFLAGS<div></div># When compiling out-of-tree modules, put MODVERDIR in the module<br/># tree rather than in the kernel tree. The kernel tree might<br/># even be read-only.<br/>export MODVERDIR := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions<div></div># Files to ignore in find ... statements<div></div>export RCS_FIND_IGNORE := \( -name SCCS -o -name BitKeeper -o -name .svn -o \<br/>			 -name CVS -o -name .pc -o -name .hg -o -name .git \) \<br/>			 -prune -o<br/>export RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn \<br/>			 --exclude CVS --exclude .pc --exclude .hg --exclude .git<div></div># ===========================================================================<br/># Rules shared between *config targets and build targets<div></div># Basic helpers built in scripts/<br/>PHONY += scripts_basic<br/>scripts_basic:<br/>	$(Q)$(MAKE) $(build)=scripts/basic<br/>	$(Q)rm -f .tmp_quiet_recordmcount<div></div># To avoid any implicit rule to kick in, define an empty command.<br/>scripts/basic/%: scripts_basic ;<div></div>PHONY += outputmakefile<br/># outputmakefile generates a Makefile in the output directory, if using a<br/># separate output directory. This allows convenient use of make in the<br/># output directory.<br/>outputmakefile:<br/>ifneq ($(KBUILD_SRC),)<br/>	$(Q)ln -fsn $(srctree) source<br/>	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkmakefile \<br/>	 $(srctree) $(objtree) $(VERSION) $(PATCHLEVEL)<br/>endif<div></div># Support for using generic headers in asm-generic<br/>PHONY += asm-generic<br/>asm-generic:<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<br/>	 src=asm obj=arch/$(SRCARCH)/include/generated/asm<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<br/>	 src=uapi/asm obj=arch/$(SRCARCH)/include/generated/uapi/asm<div></div># To make sure we do not include .config for any of the *config targets<br/># catch them early, and hand them over to scripts/kconfig/Makefile<br/># It is allowed to specify more targets when calling make, including<br/># mixing *config targets and build targets.<br/># For example 'make oldconfig all'.<br/># Detect when mixed targets is specified, and make a second invocation<br/># of make so .config is not included in this case either (for *config).<div></div>version_h := include/generated/uapi/linux/version.h<div></div>no-dot-config-targets := clean mrproper distclean \<br/>			 cscope gtags TAGS tags help %docs check% coccicheck \<br/>			 $(version_h) headers_% archheaders archscripts \<br/>			 kernelversion %src-pkg<div></div>config-targets := 0<br/>mixed-targets := 0<br/>dot-config := 1<div></div>ifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)<br/>	ifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)<br/>		dot-config := 0<br/>	endif<br/>endif<div></div>ifeq ($(KBUILD_EXTMOD),)<br/>ifneq ($(filter config %config,$(MAKECMDGOALS)),)<br/>config-targets := 1<br/>ifneq ($(filter-out config %config,$(MAKECMDGOALS)),)<br/>mixed-targets := 1<br/>endif<br/>endif<br/>endif<div></div>ifeq ($(mixed-targets),1)<br/># ===========================================================================<br/># We're called with mixed targets (*config and build targets).<br/># Handle them one by one.<div></div>PHONY += $(MAKECMDGOALS) __build_one_by_one<div></div>$(filter-out __build_one_by_one, $(MAKECMDGOALS)): __build_one_by_one<br/>	@:<div></div>__build_one_by_one:<br/>	$(Q)set -e; \<br/>	for i in $(MAKECMDGOALS); do \<br/>		$(MAKE) -f $(srctree)/Makefile $$i; \<br/>	done<div></div>else<br/>ifeq ($(config-targets),1)<br/># ===========================================================================<br/># *config targets only - make sure prerequisites are updated, and descend<br/># in scripts/kconfig to make the *config target<div></div># Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.<br/># KBUILD_DEFCONFIG may point out an alternative default configuration<br/># used for 'make defconfig'<br/>include $(srctree)/arch/$(SRCARCH)/Makefile<br/>export KBUILD_DEFCONFIG KBUILD_KCONFIG<div></div>config: scripts_basic outputmakefile FORCE<br/>	$(Q)$(MAKE) $(build)=scripts/kconfig $@<div></div>%config: scripts_basic outputmakefile FORCE<br/>	$(Q)$(MAKE) $(build)=scripts/kconfig $@<div></div>else<br/># ===========================================================================<br/># Build targets only - this includes vmlinux, arch specific targets, clean<br/># targets and others. In general all targets except *config targets.<div></div>ifeq ($(KBUILD_EXTMOD),)<br/># Additional helpers built in scripts/<br/># Carefully list dependencies so we do not try to build scripts twice<br/># in parallel<br/>PHONY += scripts<br/>scripts: scripts_basic include/config/auto.conf include/config/tristate.conf \<br/>	 asm-generic<br/>	$(Q)$(MAKE) $(build)=$(@)<div></div># Objects we will link into vmlinux / subdirs we need to visit<br/>init-y		:= init/<br/>drivers-y	:= drivers/ sound/ firmware/<br/>net-y		:= net/<br/>libs-y		:= lib/<br/>core-y		:= usr/<br/>endif # KBUILD_EXTMOD<div></div>ifeq ($(dot-config),1)<br/># Read in config<br/>-include include/config/auto.conf<div></div>ifeq ($(KBUILD_EXTMOD),)<br/># Read in dependencies to all Kconfig* files, make sure to run<br/># oldconfig if changes are detected.<br/>-include include/config/auto.conf.cmd<div></div># To avoid any implicit rule to kick in, define an empty command<br/>$(KCONFIG_CONFIG) include/config/auto.conf.cmd: ;<div></div># If .config is newer than include/config/auto.conf, someone tinkered<br/># with it and forgot to run make oldconfig.<br/># if auto.conf.cmd is missing then we are probably in a cleaned tree so<br/># we execute the config step to be sure to catch updated Kconfig files<br/>include/config/%.conf: $(KCONFIG_CONFIG) include/config/auto.conf.cmd<br/>	$(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig<br/>else<br/># external modules needs include/generated/autoconf.h and include/config/auto.conf<br/># but do not care if they are up-to-date. Use auto.conf to trigger the test<br/>PHONY += include/config/auto.conf<div></div>include/config/auto.conf:<br/>	$(Q)test -e include/generated/autoconf.h -a -e $@ || (		\<br/>	echo >&2;							\<br/>	echo >&2 " ERROR: Kernel configuration is invalid.";		\<br/>	echo >&2 " include/generated/autoconf.h or $@ are missing.";\<br/>	echo >&2 " Run 'make oldconfig && make prepare' on kernel src to fix it.";	\<br/>	echo >&2 ;							\<br/>	/bin/false)<div></div>endif # KBUILD_EXTMOD<div></div>else<br/># Dummy target needed, because used as prerequisite<br/>include/config/auto.conf: ;<br/>endif # $(dot-config)<div></div># The all: target is the default when no target is given on the<br/># command line.<br/># This allow a user to issue only 'make' to build a kernel including modules<br/># Defaults to vmlinux, but the arch makefile usually adds further targets<br/>all: vmlinux<div></div>include $(srctree)/arch/$(SRCARCH)/Makefile<div></div>KBUILD_CFLAGS	+= $(call cc-option,-fno-delete-null-pointer-checks,)<div></div>ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE<br/>KBUILD_CFLAGS	+= -Os $(call cc-disable-warning,maybe-uninitialized,)<br/>else<br/>KBUILD_CFLAGS	+= -O2<br/>endif<div></div># Tell gcc to never replace conditional load with a non-conditional one<br/>KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)<div></div>ifdef CONFIG_READABLE_ASM<br/># Disable optimizations that make assembler listings hard to read.<br/># reorder blocks reorders the control in the function<br/># ipa clone creates specialized cloned functions<br/># partial inlining inlines only parts of functions<br/>KBUILD_CFLAGS += $(call cc-option,-fno-reorder-blocks,) \<br/>$(call cc-option,-fno-ipa-cp-clone,) \<br/>$(call cc-option,-fno-partial-inlining)<br/>endif<div></div>ifneq ($(CONFIG_FRAME_WARN),0)<br/>KBUILD_CFLAGS += $(call cc-option)<br/>KBUILD_CFLAGS += $(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})<br/>endif<div></div># Handle stack protector mode.<br/>#<br/># Since kbuild can potentially perform two passes (first with the old<br/># .config values and then with updated .config values), we cannot error out<br/># if a desired compiler option is unsupported. If we were to error, kbuild<br/># could never get to the second pass and actually notice that we changed<br/># the option to something that was supported.<br/>#<br/># Additionally, we don't want to fallback and/or silently change which compiler<br/># flags will be used, since that leads to producing kernels with different<br/># security feature characteristics depending on the compiler used. ("But I<br/># selected CC_STACKPROTECTOR_STRONG! Why did it build with _REGULAR?!")<br/>#<br/># The middle ground is to warn here so that the failed option is obvious, but<br/># to let the build fail with bad compiler flags so that we can't produce a<br/># kernel when there is a CONFIG and compiler mismatch.<br/>#<br/>ifdef CONFIG_CC_STACKPROTECTOR_REGULAR<br/>stackp-flag := -fstack-protector<br/>ifeq ($(call cc-option, $(stackp-flag)),)<br/>$(warning Cannot use CONFIG_CC_STACKPROTECTOR_REGULAR: \<br/>-fstack-protector not supported by compiler)<br/>endif<br/>else<br/>ifdef CONFIG_CC_STACKPROTECTOR_STRONG<br/>stackp-flag := -fstack-protector-strong<br/>ifeq ($(call cc-option, $(stackp-flag)),)<br/>$(warning Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: \<br/>	 -fstack-protector-strong not supported by compiler)<br/>endif<br/>else<br/># Force off for distro compilers that enable stack protector by default.<br/>stackp-flag := $(call cc-option, -fno-stack-protector)<br/>endif<br/>endif<br/>KBUILD_CFLAGS += $(stackp-flag)<div></div>ifeq ($(COMPILER),clang)<br/>KBUILD_CPPFLAGS += $(call cc-option,-Qunused-arguments,)<br/>KBUILD_CPPFLAGS += $(call cc-option,-Wno-unknown-warning-option,)<br/>#Mysteryagr<br/>#Don't treat warnings as errors for now<br/>#KBUILD_CFLAGS += $(call cc-disable-warning, unused-variable)<br/>KBUILD_CFLAGS += $(call cc-disable-warning, format-invalid-specifier)<br/>KBUILD_CFLAGS += $(call cc-disable-warning, gnu)<br/># Quiet clang warning: comparison of unsigned expression < 0 is always false<br/>KBUILD_CFLAGS += $(call cc-disable-warning, tautological-compare)<br/># CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the<br/># source of a reference will be _MergedGlobals and not on of the whitelisted names.<br/># See modpost pattern 2<br/>KBUILD_CFLAGS += $(call cc-option, -mno-global-merge,)<br/>KBUILD_CFLAGS += $(call cc-option, -fcatch-undefined-behavior)<br/>else<div></div># These warnings generated too much noise in a regular build.<br/># Use make W=1 to enable them (see scripts/Makefile.build)<br/>KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)<br/>KBUILD_CFLAGS += $(call cc-disable-warning, unused-const-variable)<br/>endif<div></div>ifdef CONFIG_FRAME_POINTER<br/>KBUILD_CFLAGS	+= -fno-omit-frame-pointer -fno-optimize-sibling-calls<br/>else<br/># Some targets (ARM with Thumb2, for example), can't be built with frame<br/># pointers. For those, we don't have FUNCTION_TRACER automatically<br/># select FRAME_POINTER. However, FUNCTION_TRACER adds -pg, and this is<br/># incompatible with -fomit-frame-pointer with current GCC, so we don't use<br/># -fomit-frame-pointer with FUNCTION_TRACER.<br/>ifndef CONFIG_FUNCTION_TRACER<br/>KBUILD_CFLAGS	+= -fomit-frame-pointer<br/>endif<br/>endif<div></div>KBUILD_CFLAGS += $(call cc-option, -fno-var-tracking-assignments)<div></div>ifdef CONFIG_DEBUG_INFO<br/>ifdef CONFIG_DEBUG_INFO_SPLIT<br/>KBUILD_CFLAGS += $(call cc-option, -gsplit-dwarf, -g)<br/>else<br/>KBUILD_CFLAGS	+= -g<br/>endif<br/>KBUILD_AFLAGS	+= -Wa,-gdwarf-2<br/>endif<br/>ifdef CONFIG_DEBUG_INFO_DWARF4<br/>KBUILD_CFLAGS	+= $(call cc-option, -gdwarf-4,)<br/>endif<div></div>ifdef CONFIG_DEBUG_INFO_REDUCED<br/>KBUILD_CFLAGS 	+= $(call cc-option, -femit-struct-debug-baseonly) \<br/>		 $(call cc-option,-fno-var-tracking)<br/>endif<div></div>ifdef CONFIG_FUNCTION_TRACER<br/>ifdef CONFIG_HAVE_FENTRY<br/>CC_USING_FENTRY	:= $(call cc-option, -mfentry -DCC_USING_FENTRY)<br/>endif<br/>KBUILD_CFLAGS	+= -pg $(CC_USING_FENTRY)<br/>KBUILD_AFLAGS	+= $(CC_USING_FENTRY)<br/>ifdef CONFIG_DYNAMIC_FTRACE<br/>	ifdef CONFIG_HAVE_C_RECORDMCOUNT<br/>		BUILD_C_RECORDMCOUNT := y<br/>		export BUILD_C_RECORDMCOUNT<br/>	endif<br/>endif<br/>endif<div></div># We trigger additional mismatches with less inlining<br/>ifdef CONFIG_DEBUG_SECTION_MISMATCH<br/>KBUILD_CFLAGS += $(call cc-option, -fno-inline-functions-called-once)<br/>endif<div></div># arch Makefile may override CC so keep this after arch Makefile is included<br/>NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)<br/>CHECKFLAGS += $(NOSTDINC_FLAGS)<div></div># warn about C99 declaration after statement<br/>KBUILD_CFLAGS += $(call cc-option,-Wdeclaration-after-statement,)<div></div># disable pointer signed / unsigned warnings in gcc 4.0<br/>KBUILD_CFLAGS += $(call cc-disable-warning, pointer-sign)<div></div># disable invalid "can't wrap" optimizations for signed / pointers<br/>KBUILD_CFLAGS	+= $(call cc-option,-fno-strict-overflow)<div></div># conserve stack if available<br/>KBUILD_CFLAGS += $(call cc-option,-fconserve-stack)<div></div># disallow errors like 'EXPORT_GPL(foo);' with missing header<br/>KBUILD_CFLAGS += $(call cc-option)<div></div># require functions to have arguments in prototypes, not empty 'int foo()'<br/>#Mysteryagr<br/>#Don't treat warnings as errors for now<br/>#KBUILD_CFLAGS += $(call cc-option,-Werror=strict-prototypes)<div></div># Prohibit date/time macros, which would make the build non-deterministic<br/>KBUILD_CFLAGS += $(call cc-option)<div></div># use the deterministic mode of AR if available<br/>KBUILD_ARFLAGS := $(call ar-option,D)<div></div># check for 'asm goto'<br/>ifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-goto.sh $(CC)), y)<br/>	KBUILD_CFLAGS += -DCC_HAVE_ASM_GOTO<br/>endif<div></div>include $(srctree)/scripts/Makefile.extrawarn<div></div># Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments<br/>KBUILD_CPPFLAGS += $(KCPPFLAGS)<br/>KBUILD_AFLAGS += $(KAFLAGS)<br/>KBUILD_CFLAGS += $(KCFLAGS)<div></div># Use --build-id when available.<br/>LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\<br/>			 $(call cc-ldoption, -Wl$(comma)--build-id,))<br/>KBUILD_LDFLAGS_MODULE += $(LDFLAGS_BUILD_ID)<br/>LDFLAGS_vmlinux += $(LDFLAGS_BUILD_ID)<div></div>ifeq ($(CONFIG_STRIP_ASM_SYMS),y)<br/>LDFLAGS_vmlinux	+= $(call ld-option, -X,)<br/>endif<div></div># Default kernel image to build when no specific target is given.<br/># KBUILD_IMAGE may be overruled on the command line or<br/># set in the environment<br/># Also any assignments in arch/$(ARCH)/Makefile take precedence over<br/># this default value<br/>export KBUILD_IMAGE ?= vmlinux<div></div>#<br/># INSTALL_PATH specifies where to place the updated kernel and system map<br/># images. Default is /boot, but you can set it to other values<br/>export	INSTALL_PATH ?= /boot<div></div>#<br/># INSTALL_DTBS_PATH specifies a prefix for relocations required by build roots.<br/># Like INSTALL_MOD_PATH, it isn't defined in the Makefile, but can be passed as<br/># an argument if needed. Otherwise it defaults to the kernel install path<br/>#<br/>export INSTALL_DTBS_PATH ?= $(INSTALL_PATH)/dtbs/$(KERNELRELEASE)<div></div>#<br/># INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory<br/># relocations required by build roots. This is not defined in the<br/># makefile but the argument can be passed to make if needed.<br/>#<div></div>MODLIB	= $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)<br/>export MODLIB<div></div>#<br/># INSTALL_MOD_STRIP, if defined, will cause modules to be<br/># stripped after they are installed. If INSTALL_MOD_STRIP is '1', then<br/># the default option --strip-debug will be used. Otherwise,<br/># INSTALL_MOD_STRIP value will be used as the options to the strip command.<div></div>ifdef INSTALL_MOD_STRIP<br/>ifeq ($(INSTALL_MOD_STRIP),1)<br/>mod_strip_cmd = $(STRIP) --strip-debug<br/>else<br/>mod_strip_cmd = $(STRIP) $(INSTALL_MOD_STRIP)<br/>endif # INSTALL_MOD_STRIP=1<br/>else<br/>mod_strip_cmd = true<br/>endif # INSTALL_MOD_STRIP<br/>export mod_strip_cmd<div></div># CONFIG_MODULE_COMPRESS, if defined, will cause module to be compressed<br/># after they are installed in agreement with CONFIG_MODULE_COMPRESS_GZIP<br/># or CONFIG_MODULE_COMPRESS_XZ.<div></div>mod_compress_cmd = true<br/>ifdef CONFIG_MODULE_COMPRESS<br/>ifdef CONFIG_MODULE_COMPRESS_GZIP<br/>mod_compress_cmd = gzip -n<br/>endif # CONFIG_MODULE_COMPRESS_GZIP<br/>ifdef CONFIG_MODULE_COMPRESS_XZ<br/>mod_compress_cmd = xz<br/>endif # CONFIG_MODULE_COMPRESS_XZ<br/>endif # CONFIG_MODULE_COMPRESS<br/>export mod_compress_cmd<div></div># Select initial ramdisk compression format, default is gzip(1).<br/># This shall be used by the dracut(8) tool while creating an initramfs image.<br/>#<br/>INITRD_COMPRESS-y := gzip<br/>INITRD_COMPRESS-$(CONFIG_RD_BZIP2) := bzip2<br/>INITRD_COMPRESS-$(CONFIG_RD_LZMA) := lzma<br/>INITRD_COMPRESS-$(CONFIG_RD_XZ) := xz<br/>INITRD_COMPRESS-$(CONFIG_RD_LZO) := lzo<br/>INITRD_COMPRESS-$(CONFIG_RD_LZ4) := lz4<br/># do not export INITRD_COMPRESS, since we didn't actually<br/># choose a sane default compression above.<br/># export INITRD_COMPRESS := $(INITRD_COMPRESS-y)<div></div>ifdef CONFIG_MODULE_SIG_ALL<br/>MODSECKEY = ./signing_key.priv<br/>MODPUBKEY = ./signing_key.x509<br/>export MODPUBKEY<br/>mod_sign_cmd = perl $(srctree)/scripts/sign-file $(CONFIG_MODULE_SIG_HASH) $(MODSECKEY) $(MODPUBKEY)<br/>else<br/>mod_sign_cmd = true<br/>endif<br/>export mod_sign_cmd<div></div><br/>ifeq ($(KBUILD_EXTMOD),)<br/>core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/<div></div>vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \<br/>		 $(core-y) $(core-m) $(drivers-y) $(drivers-m) \<br/>		 $(net-y) $(net-m) $(libs-y) $(libs-m)))<div></div>vmlinux-alldirs	:= $(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \<br/>		 $(init-) $(core-) $(drivers-) $(net-) $(libs-))))<div></div>init-y		:= $(patsubst %/, %/built-in.o, $(init-y))<br/>core-y		:= $(patsubst %/, %/built-in.o, $(core-y))<br/>drivers-y	:= $(patsubst %/, %/built-in.o, $(drivers-y))<br/>net-y		:= $(patsubst %/, %/built-in.o, $(net-y))<br/>libs-y1		:= $(patsubst %/, %/lib.a, $(libs-y))<br/>libs-y2		:= $(patsubst %/, %/built-in.o, $(libs-y))<br/>libs-y		:= $(libs-y1) $(libs-y2)<div></div># Externally visible symbols (used by link-vmlinux.sh)<br/>export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)<br/>export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y) $(drivers-y) $(net-y)<br/>export KBUILD_LDS := arch/$(SRCARCH)/kernel/vmlinux.lds<br/>export LDFLAGS_vmlinux<br/># used by scripts/pacmage/Makefile<br/>export KBUILD_ALLDIRS := $(sort $(filter-out arch/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools virt)<div></div>vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN)<div></div># Final link of vmlinux<br/>cmd_link-vmlinux = $(CONFIG_SHELL) $< $(LD) $(LDFLAGS) $(LDFLAGS_vmlinux)<br/>quiet_cmd_link-vmlinux = LINK $@<div></div># Include targets which we want to<br/># execute if the rest of the kernel build went well.<br/>vmlinux: scripts/link-vmlinux.sh $(vmlinux-deps) FORCE<br/>ifdef CONFIG_HEADERS_CHECK<br/>	$(Q)$(MAKE) -f $(srctree)/Makefile headers_check<br/>endif<br/>ifdef CONFIG_SAMPLES<br/>	$(Q)$(MAKE) $(build)=samples<br/>endif<br/>ifdef CONFIG_BUILD_DOCSRC<br/>	$(Q)$(MAKE) $(build)=Documentation<br/>endif<br/>	+$(call if_changed,link-vmlinux)<div></div># The actual objects are generated when descending,<br/># make sure no implicit rule kicks in<br/>$(sort $(vmlinux-deps)): $(vmlinux-dirs) ;<div></div># Handle descending into subdirectories listed in $(vmlinux-dirs)<br/># Preset locale variables to speed up the build process. Limit locale<br/># tweaks to this spot to avoid wrong language settings when running<br/># make menuconfig etc.<br/># Error messages still appears in the original language<div></div>PHONY += $(vmlinux-dirs)<br/>$(vmlinux-dirs): prepare scripts<br/>	$(Q)$(MAKE) $(build)=$@<div></div>define filechk_kernel.release<br/>	echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"<br/>endef<div></div># Store (new) KERNELRELEASE string in include/config/kernel.release<br/>include/config/kernel.release: include/config/auto.conf FORCE<br/>	$(call filechk,kernel.release)<div></div><br/># Things we need to do before we recursively start building the kernel<br/># or the modules are listed in "prepare".<br/># A multi level approach is used. prepareN is processed before prepareN-1.<br/># archprepare is used in arch Makefiles and when processed asm symlink,<br/># version.h and scripts_basic is processed / created.<div></div># Listed in dependency order<br/>PHONY += prepare archprepare prepare0 prepare1 prepare2 prepare3<div></div># prepare3 is used to check if we are building in a separate output directory,<br/># and if so do:<br/># 1) Check that make has not been executed in the kernel src $(srctree)<br/>prepare3: include/config/kernel.release<br/>ifneq ($(KBUILD_SRC),)<br/>	@$(kecho) ' Using $(srctree) as source for kernel'<br/>	$(Q)if [ -f $(srctree)/.config -o -d $(srctree)/include/config ]; then \<br/>		echo >&2 " $(srctree) is not clean, please run 'make mrproper'"; \<br/>		echo >&2 " in the '$(srctree)' directory.";\<br/>		/bin/false; \<br/>	fi;<br/>endif<div></div># prepare2 creates a makefile if using a separate output directory<br/>prepare2: prepare3 outputmakefile asm-generic<div></div>prepare1: prepare2 $(version_h) include/generated/utsrelease.h \<br/>include/config/auto.conf<br/>	$(cmd_crmodverdir)<div></div>archprepare: archheaders archscripts prepare1 scripts_basic<div></div>prepare0: archprepare FORCE<br/>	$(Q)$(MAKE) $(build)=.<div></div># All the preparing..<br/>prepare: prepare0<div></div># Generate some files<br/># ---------------------------------------------------------------------------<div></div># KERNELRELEASE can change from a few different places, meaning version.h<br/># needs to be updated, so this check is forced on all builds<div></div>uts_len := 64<br/>define filechk_utsrelease.h<br/>	if [ `echo -n "$(KERNELRELEASE)" | wc -c ` -gt $(uts_len) ]; then \<br/>	 echo '"$(KERNELRELEASE)" exceeds $(uts_len) characters' >&2; \<br/>	 exit 1; \<br/>	fi; \<br/>	(echo \#define UTS_RELEASE \"$(KERNELRELEASE)\";)<br/>endef<div></div>define filechk_version.h<br/>	(echo \#define LINUX_VERSION_CODE $(shell \<br/>	expr $(VERSION) \* 65536 + 0$(PATCHLEVEL) \* 256 + 0$(SUBLEVEL)); \<br/>	echo '#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))';)<br/>endef<div></div>$(version_h): $(srctree)/Makefile FORCE<br/>	$(call filechk,version.h)<div></div>include/generated/utsrelease.h: include/config/kernel.release FORCE<br/>	$(call filechk,utsrelease.h)<div></div>PHONY += headerdep<br/>headerdep:<br/>	$(Q)find $(srctree)/include/ -name '*.h' | xargs --max-args 1 \<br/>	$(srctree)/scripts/headerdep.pl -I$(srctree)/include<div></div># ---------------------------------------------------------------------------<div></div>PHONY += depend dep<br/>depend dep:<br/>	@echo '*** Warning: make $@ is unnecessary now.'<div></div># ---------------------------------------------------------------------------<br/># Firmware install<br/>INSTALL_FW_PATH=$(INSTALL_MOD_PATH)/lib/firmware<br/>export INSTALL_FW_PATH<div></div>PHONY += firmware_install<br/>firmware_install: FORCE<br/>	@mkdir -p $(objtree)/firmware<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_install<div></div># ---------------------------------------------------------------------------<br/># Kernel headers<div></div>#Default location for installed headers<br/>export INSTALL_HDR_PATH = $(objtree)/usr<div></div>hdr-inst := -rR -f $(srctree)/scripts/Makefile.headersinst obj<div></div># If we do an all arch process set dst to asm-$(hdr-arch)<br/>hdr-dst = $(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)<div></div>PHONY += archheaders<br/>archheaders:<div></div>PHONY += archscripts<br/>archscripts:<div></div>PHONY += __headers<br/>__headers: $(version_h) scripts_basic asm-generic archheaders archscripts FORCE<br/>	$(Q)$(MAKE) $(build)=scripts build_unifdef<div></div>PHONY += headers_install_all<br/>headers_install_all:<br/>	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh install<div></div>PHONY += headers_install<br/>headers_install: __headers<br/>	$(if $(wildcard $(srctree)/arch/$(hdr-arch)/include/uapi/asm/Kbuild),, \<br/>	 $(error Headers not exportable for the $(SRCARCH) architecture))<br/>	$(Q)$(MAKE) $(hdr-inst)=include/uapi<br/>	$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst)<div></div>PHONY += headers_check_all<br/>headers_check_all: headers_install_all<br/>	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh check<div></div>PHONY += headers_check<br/>headers_check: headers_install<br/>	$(Q)$(MAKE) $(hdr-inst)=include/uapi HDRCHECK=1<br/>	$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst) HDRCHECK=1<div></div># ---------------------------------------------------------------------------<br/># Kernel selftest<div></div>PHONY += kselftest<br/>kselftest:<br/>	$(Q)$(MAKE) -C tools/testing/selftests run_tests<div></div># ---------------------------------------------------------------------------<br/># Modules<div></div>ifdef CONFIG_MODULES<div></div># By default, build modules as well<div></div>all: modules<div></div># Build modules<br/>#<br/># A module can be listed more than once in obj-m resulting in<br/># duplicate lines in modules.order files. Those are removed<br/># using awk while concatenating to the final file.<div></div>PHONY += modules<br/>modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux) modules.builtin<br/>	$(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) > $(objtree)/modules.order<br/>	@$(kecho) ' Building modules, stage 2.';<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modbuild<div></div>modules.builtin: $(vmlinux-dirs:%=%/modules.builtin)<br/>	$(Q)$(AWK) '!x[$$0]++' $^ > $(objtree)/modules.builtin<div></div>%/modules.builtin: include/config/auto.conf<br/>	$(Q)$(MAKE) $(modbuiltin)=$*<div></div><br/># Target to prepare building external modules<br/>PHONY += modules_prepare<br/>modules_prepare: prepare scripts<div></div># Target to install modules<br/>PHONY += modules_install<br/>modules_install: _modinst_ _modinst_post<div></div>PHONY += _modinst_<br/>_modinst_:<br/>	@rm -rf $(MODLIB)/kernel<br/>	@rm -f $(MODLIB)/source<br/>	@mkdir -p $(MODLIB)/kernel<br/>	@ln -s `cd $(srctree) && /bin/pwd` $(MODLIB)/source<br/>	@if [ ! $(objtree) -ef $(MODLIB)/build ]; then \<br/>		rm -f $(MODLIB)/build ; \<br/>		ln -s $(CURDIR) $(MODLIB)/build ; \<br/>	fi<br/>	@cp -f $(objtree)/modules.order $(MODLIB)/<br/>	@cp -f $(objtree)/modules.builtin $(MODLIB)/<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst<div></div># This depmod is only for convenience to give the initial<br/># boot a modules.dep even before / is mounted read-write. However the<br/># boot script depmod is the master version.<br/>PHONY += _modinst_post<br/>_modinst_post: _modinst_<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modinst<br/>	$(call cmd,depmod)<div></div>ifeq ($(CONFIG_MODULE_SIG), y)<br/>PHONY += modules_sign<br/>modules_sign:<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modsign<br/>endif<div></div>else # CONFIG_MODULES<div></div># Modules not configured<br/># ---------------------------------------------------------------------------<div></div>modules modules_install: FORCE<br/>	@echo >&2<br/>	@echo >&2 "The present kernel configuration has modules disabled."<br/>	@echo >&2 "Type 'make config' and enable loadable module support."<br/>	@echo >&2 "Then build a kernel with module support enabled."<br/>	@echo >&2<br/>	@exit 1<div></div>endif # CONFIG_MODULES<div></div>###<br/># Cleaning is done on three levels.<br/># make clean Delete most generated files<br/># Leave enough to build external modules<br/># make mrproper Delete the current configuration, and all generated files<br/># make distclean Remove editor backup files, patch leftover files and the like<div></div># Directories & files removed with 'make clean'<br/>CLEAN_DIRS += $(MODVERDIR)<div></div># Directories & files removed with 'make mrproper'<br/>MRPROPER_DIRS += include/config usr/include include/generated \<br/>		 arch/*/include/generated .tmp_objdiff<br/>MRPROPER_FILES += .config .config.old .version .old_version $(version_h) \<br/>		 Module.symvers tags TAGS cscope* GPATH GTAGS GRTAGS GSYMS \<br/>		 signing_key.priv signing_key.x509 x509.genkey		\<br/>		 extra_certificates signing_key.x509.keyid		\<br/>		 signing_key.x509.signer include/linux/version.h<div></div># clean - Delete most, but leave enough to build external modules<br/>#<br/>clean: rm-dirs := $(CLEAN_DIRS)<br/>clean: rm-files := $(CLEAN_FILES)<br/>clean-dirs := $(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)<div></div>PHONY += $(clean-dirs) clean archclean vmlinuxclean<br/>$(clean-dirs):<br/>	$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)<div></div>vmlinuxclean:<br/>	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/link-vmlinux.sh clean<div></div>clean: archclean vmlinuxclean<div></div># mrproper - Delete all generated files, including .config<br/>#<br/>mrproper: rm-dirs := $(wildcard $(MRPROPER_DIRS))<br/>mrproper: rm-files := $(wildcard $(MRPROPER_FILES))<br/>mrproper-dirs := $(addprefix _mrproper_,Documentation/DocBook scripts)<div></div>PHONY += $(mrproper-dirs) mrproper archmrproper<br/>$(mrproper-dirs):<br/>	$(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)<div></div>mrproper: clean archmrproper $(mrproper-dirs)<br/>	$(call cmd,rmdirs)<br/>	$(call cmd,rmfiles)<div></div># distclean<br/>#<br/>PHONY += distclean<div></div>distclean: mrproper<br/>	@find $(srctree) $(RCS_FIND_IGNORE) \<br/>		\( -name '*.orig' -o -name '*.rej' -o -name '*~' \<br/>		-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \<br/>		-o -name '.*.rej' -o -name '*%' -o -name 'core' \) \<br/>		-type f -print | xargs rm -f<div></div><br/># Packaging of the kernel to various formats<br/># ---------------------------------------------------------------------------<br/># rpm target kept for backward compatibility<br/>package-dir	:= scripts/package<div></div>%src-pkg: FORCE<br/>	$(Q)$(MAKE) $(build)=$(package-dir) $@<br/>%pkg: include/config/kernel.release FORCE<br/>	$(Q)$(MAKE) $(build)=$(package-dir) $@<br/>rpm: include/config/kernel.release FORCE<br/>	$(Q)$(MAKE) $(build)=$(package-dir) $@<div></div><br/># Brief documentation of the typical targets used<br/># ---------------------------------------------------------------------------<div></div>boards := $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)<br/>boards := $(notdir $(boards))<br/>board-dirs := $(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))<br/>board-dirs := $(sort $(notdir $(board-dirs:/=)))<div></div>help:<br/>	@echo 'Cleaning targets:'<br/>	@echo ' clean		 - Remove most generated files but keep the config and'<br/>	@echo ' enough build support to build external modules'<br/>	@echo ' mrproper	 - Remove all generated files + config + various backup files'<br/>	@echo ' distclean	 - mrproper + remove editor backup and patch files'<br/>	@echo ''<br/>	@echo 'Configuration targets:'<br/>	@$(MAKE) -f $(srctree)/scripts/kconfig/Makefile help<br/>	@echo ''<br/>	@echo 'Other generic targets:'<br/>	@echo ' all		 - Build all targets marked with [*]'<br/>	@echo '* vmlinux	 - Build the bare kernel'<br/>	@echo '* modules	 - Build all modules'<br/>	@echo ' modules_install - Install all modules to INSTALL_MOD_PATH (default: /)'<br/>	@echo ' firmware_install- Install all firmware to INSTALL_FW_PATH'<br/>	@echo ' (default: $$(INSTALL_MOD_PATH)/lib/firmware)'<br/>	@echo ' dir/ - Build all files in dir and below'<br/>	@echo ' dir/file.[oisS] - Build specified target only'<br/>	@echo ' dir/file.lst - Build specified mixed source/assembly target only'<br/>	@echo ' (requires a recent binutils and recent build (System.map))'<br/>	@echo ' dir/file.ko - Build module including final link'<br/>	@echo ' modules_prepare - Set up for building external modules'<br/>	@echo ' tags/TAGS	 - Generate tags file for editors'<br/>	@echo ' cscope	 - Generate cscope index'<br/>	@echo ' gtags - Generate GNU GLOBAL index'<br/>	@echo ' kernelrelease	 - Output the release version string (use with make -s)'<br/>	@echo ' kernelversion	 - Output the version stored in Makefile (use with make -s)'<br/>	@echo ' image_name	 - Output the image name (use with make -s)'<br/>	@echo ' headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH'; \<br/>	 echo ' (default: $(INSTALL_HDR_PATH))'; \<br/>	 echo ''<br/>	@echo 'Static analysers'<br/>	@echo ' checkstack - Generate a list of stack hogs'<br/>	@echo ' namespacecheck - Name space analysis on compiled kernel'<br/>	@echo ' versioncheck - Sanity check on version.h usage'<br/>	@echo ' includecheck - Check for duplicate included header files'<br/>	@echo ' export_report - List the usages of all exported symbols'<br/>	@echo ' headers_check - Sanity check on exported headers'<br/>	@echo ' headerdep - Detect inclusion cycles in headers'<br/>	@$(MAKE) -f $(srctree)/scripts/Makefile.help checker-help<br/>	@echo ''<br/>	@echo 'Kernel selftest'<br/>	@echo ' kselftest - Build and run kernel selftest (run as root)'<br/>	@echo ' Build, install, and boot kernel before'<br/>	@echo ' running kselftest on it'<br/>	@echo ''<br/>	@echo 'Kernel packaging:'<br/>	@$(MAKE) $(build)=$(package-dir) help<br/>	@echo ''<br/>	@echo 'Documentation targets:'<br/>	@$(MAKE) -f $(srctree)/Documentation/DocBook/Makefile dochelp<br/>	@echo ''<br/>	@echo 'Architecture specific targets ($(SRCARCH)):'<br/>	@$(if $(archhelp),$(archhelp),\<br/>		echo ' No architecture specific help defined for $(SRCARCH)')<br/>	@echo ''<br/>	@$(if $(boards), \<br/>		$(foreach b, $(boards), \<br/>		printf " %-24s - Build for %s\\n" $(b) $(subst _defconfig,,$(b));) \<br/>		echo '')<br/>	@$(if $(board-dirs), \<br/>		$(foreach b, $(board-dirs), \<br/>		printf " %-16s - Show %s-specific targets\\n" help-$(b) $(b);) \<br/>		printf " %-16s - Show all of the above\\n" help-boards; \<br/>		echo '')<div></div>	@echo ' make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build'<br/>	@echo ' make V=2 [targets] 2 => give reason for rebuild of target'<br/>	@echo ' make O=dir [targets] Locate all output files in "dir", including .config'<br/>	@echo ' make C=1 [targets] Check all c source with $$CHECK (sparse by default)'<br/>	@echo ' make C=2 [targets] Force check of all c source with $$CHECK'<br/>	@echo ' make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections'<br/>	@echo ' make W=n [targets] Enable extra gcc checks, n=1,2,3 where'<br/>	@echo '		1: warnings which may be relevant and do not occur too often'<br/>	@echo '		2: warnings which occur quite often but may still be relevant'<br/>	@echo '		3: more obscure warnings, can most likely be ignored'<br/>	@echo '		Multiple levels can be combined with W=12 or W=123'<br/>	@echo ''<br/>	@echo 'Execute "make" or "make all" to build all targets marked with [*] '<br/>	@echo 'For further info see the ./README file'<div></div><br/>help-board-dirs := $(addprefix help-,$(board-dirs))<div></div>help-boards: $(help-board-dirs)<div></div>boards-per-dir = $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig))<div></div>$(help-board-dirs): help-%:<br/>	@echo 'Architecture specific targets ($(SRCARCH) $*):'<br/>	@$(if $(boards-per-dir), \<br/>		$(foreach b, $(boards-per-dir), \<br/>		printf " %-24s - Build for %s\\n" $*/$(b) $(subst _defconfig,,$(b));) \<br/>		echo '')<div></div><br/># Documentation targets<br/># ---------------------------------------------------------------------------<br/>%docs: scripts_basic FORCE<br/>	$(Q)$(MAKE) $(build)=scripts build_docproc<br/>	$(Q)$(MAKE) $(build)=Documentation/DocBook $@<div></div>else # KBUILD_EXTMOD<div></div>###<br/># External module support.<br/># When building external modules the kernel used as basis is considered<br/># read-only, and no consistency checks are made and the make<br/># system is not used on the basis kernel. If updates are required<br/># in the basis kernel ordinary make commands (without M=...) must<br/># be used.<br/>#<br/># The following are the only valid targets when building external<br/># modules.<br/># make M=dir clean Delete all automatically generated files<br/># make M=dir modules Make all modules in specified dir<br/># make M=dir	 Same as 'make M=dir modules'<br/># make M=dir modules_install<br/># Install the modules built in the module directory<br/># Assumes install directory is already created<div></div># We are always building modules<br/>KBUILD_MODULES := 1<br/>PHONY += crmodverdir<br/>crmodverdir:<br/>	$(cmd_crmodverdir)<div></div>PHONY += $(objtree)/Module.symvers<br/>$(objtree)/Module.symvers:<br/>	@test -e $(objtree)/Module.symvers || ( \<br/>	echo; \<br/>	echo " WARNING: Symbol version dump $(objtree)/Module.symvers"; \<br/>	echo " is missing; modules will have no dependencies and modversions."; \<br/>	echo )<div></div>module-dirs := $(addprefix _module_,$(KBUILD_EXTMOD))<br/>PHONY += $(module-dirs) modules<br/>$(module-dirs): crmodverdir $(objtree)/Module.symvers<br/>	$(Q)$(MAKE) $(build)=$(patsubst _module_%,%,$@)<div></div>modules: $(module-dirs)<br/>	@$(kecho) ' Building modules, stage 2.';<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost<div></div>PHONY += modules_install<br/>modules_install: _emodinst_ _emodinst_post<div></div>install-dir := $(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)<br/>PHONY += _emodinst_<br/>_emodinst_:<br/>	$(Q)mkdir -p $(MODLIB)/$(install-dir)<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst<div></div>PHONY += _emodinst_post<br/>_emodinst_post: _emodinst_<br/>	$(call cmd,depmod)<div></div>clean-dirs := $(addprefix _clean_,$(KBUILD_EXTMOD))<div></div>PHONY += $(clean-dirs) clean<br/>$(clean-dirs):<br/>	$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)<div></div>clean:	rm-dirs := $(MODVERDIR)<br/>clean: rm-files := $(KBUILD_EXTMOD)/Module.symvers<div></div>help:<br/>	@echo ' Building external modules.'<br/>	@echo ' Syntax: make -C path/to/kernel/src M=$$PWD target'<br/>	@echo ''<br/>	@echo ' modules - default target, build the module(s)'<br/>	@echo ' modules_install - install the module'<br/>	@echo ' clean - remove generated files in module directory only'<br/>	@echo ''<div></div># Dummies...<br/>PHONY += prepare scripts<br/>prepare: ;<br/>scripts: ;<br/>endif # KBUILD_EXTMOD<div></div>clean: $(clean-dirs)<br/>	$(call cmd,rmdirs)<br/>	$(call cmd,rmfiles)<br/>	@find $(if $(KBUILD_EXTMOD), $(KBUILD_EXTMOD), .) $(RCS_FIND_IGNORE) \<br/>		\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \<br/>		-o -name '*.ko.*' \<br/>		-o -name '*.dwo' \<br/>		-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \<br/>		-o -name '*.symtypes' -o -name 'modules.order' \<br/>		-o -name modules.builtin -o -name '.tmp_*.o.*' \<br/>		-o -name '*.gcno' \) -type f -print | xargs rm -f<div></div># Generate tags for editors<br/># ---------------------------------------------------------------------------<br/>quiet_cmd_tags = GEN $@<br/>cmd_tags = $(CONFIG_SHELL) $(srctree)/scripts/tags.sh $@<div></div>tags TAGS cscope gtags: FORCE<br/>	$(call cmd,tags)<div></div># Scripts to check various things for consistency<br/># ---------------------------------------------------------------------------<div></div>PHONY += includecheck versioncheck coccicheck namespacecheck export_report<div></div>includecheck:<br/>	find $(srctree)/* $(RCS_FIND_IGNORE) \<br/>		-name '*.[hcS]' -type f -print | sort \<br/>		| xargs $(PERL) -w $(srctree)/scripts/checkincludes.pl<div></div>versioncheck:<br/>	find $(srctree)/* $(RCS_FIND_IGNORE) \<br/>		-name '*.[hcS]' -type f -print | sort \<br/>		| xargs $(PERL) -w $(srctree)/scripts/checkversion.pl<div></div>coccicheck:<br/>	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/$@<div></div>namespacecheck:<br/>	$(PERL) $(srctree)/scripts/namespace.pl<div></div>export_report:<br/>	$(PERL) $(srctree)/scripts/export_report.pl<div></div>endif #ifeq ($(config-targets),1)<br/>endif #ifeq ($(mixed-targets),1)<div></div>PHONY += checkstack kernelrelease kernelversion image_name<div></div># UML needs a little special treatment here. It wants to use the host<br/># toolchain, so needs $(SUBARCH) passed to checkstack.pl. Everyone<br/># else wants $(ARCH), including people doing cross-builds, which means<br/># that $(SUBARCH) doesn't work here.<br/>ifeq ($(ARCH), um)<br/>CHECKSTACK_ARCH := $(SUBARCH)<br/>else<br/>CHECKSTACK_ARCH := $(ARCH)<br/>endif<br/>checkstack:<br/>	$(OBJDUMP) -d vmlinux $$(find . -name '*.ko') | \<br/>	$(PERL) $(src)/scripts/checkstack.pl $(CHECKSTACK_ARCH)<div></div>kernelrelease:<br/>	@echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"<div></div>kernelversion:<br/>	@echo $(KERNELVERSION)<div></div>image_name:<br/>	@echo $(KBUILD_IMAGE)<div></div># Clear a bunch of variables before executing the submake<br/>tools/: FORCE<br/>	$(Q)mkdir -p $(objtree)/tools<br/>	$(Q)$(MAKE) LDFLAGS= MAKEFLAGS="$(filter --j% -j,$(MAKEFLAGS))" O=$(objtree) subdir=tools -C $(src)/tools/<div></div>tools/%: FORCE<br/>	$(Q)mkdir -p $(objtree)/tools<br/>	$(Q)$(MAKE) LDFLAGS= MAKEFLAGS="$(filter --j% -j,$(MAKEFLAGS))" O=$(objtree) subdir=tools -C $(src)/tools/ $*<div></div># Single targets<br/># ---------------------------------------------------------------------------<br/># Single targets are compatible with:<br/># - build with mixed source and output<br/># - build with separate output dir 'make O=...'<br/># - external modules<br/>#<br/># target-dir => where to store outputfile<br/># build-dir => directory in kernel source tree to use<div></div>ifeq ($(KBUILD_EXTMOD),)<br/>build-dir = $(patsubst %/,%,$(dir $@))<br/>target-dir = $(dir $@)<br/>else<br/>zap-slash=$(filter-out .,$(patsubst %/,%,$(dir $@)))<br/>build-dir = $(KBUILD_EXTMOD)$(if $(zap-slash),/$(zap-slash))<br/>target-dir = $(if $(KBUILD_EXTMOD),$(dir $endif<div></div>%.s: %.c prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.i: %.c prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.o: %.c prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.lst: %.c prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.s: %.S prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.o: %.S prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<br/>%.symtypes: %.c prepare scripts FORCE<br/>	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<div></div># Modules<br/>/: prepare scripts FORCE<br/>	$(cmd_crmodverdir)<br/>	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \<br/>	$(build)=$(build-dir)<br/># Make sure the latest headers are built for Documentation<br/>Documentation/: headers_install<br/>%/: prepare scripts FORCE<br/>	$(cmd_crmodverdir)<br/>	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \<br/>	$(build)=$(build-dir)<br/>%.ko: prepare scripts FORCE<br/>	$(cmd_crmodverdir)<br/>	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \<br/>	$(build)=$(build-dir) $(@:.ko=.o)<br/>	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost<div></div># FIXME Should go into a make.lib or something<br/># ===========================================================================<div></div>quiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN $(wildcard $(rm-dirs)))<br/>cmd_rmdirs = rm -rf $(rm-dirs)<div></div>quiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN $(wildcard $(rm-files)))<br/>cmd_rmfiles = rm -f $(rm-files)<div></div># Run depmod only if we have System.map and depmod is executable<br/>quiet_cmd_depmod = DEPMOD $(KERNELRELEASE)<br/>cmd_depmod = $(CONFIG_SHELL) $(srctree)/scripts/depmod.sh $(DEPMOD) \<br/>$(KERNELRELEASE) "$(patsubst y,_,$(CONFIG_HAVE_UNDERSCORE_SYMBOL_PREFIX))"<div></div># Create temporary dir for module support files<br/># clean it up only when building all modules<br/>cmd_crmodverdir = $(Q)mkdir -p $(MODVERDIR) \<br/>$(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)<div></div># read all saved command lines<div></div>targets := $(wildcard $(sort $(targets)))<br/>cmd_files := $(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))<div></div>ifneq ($(cmd_files),)<br/>$(cmd_files): ;	# Do not try to update included dependency files<br/>include $(cmd_files)<br/>endif<div></div># Shorthand for $(Q)$(MAKE) -f scripts/Makefile.clean obj=dir<br/># Usage:<br/># $(Q)$(MAKE) $(clean)=dir<br/>clean := -f $(srctree)/scripts/Makefile.clean obj<div></div>endif	# skip-makefile<div></div>PHONY += FORCE<br/>FORCE:<div></div># Declare the contents of the .PHONY variable as phony. We keep that<br/># information in a variable so we can use it in if_changed and friends.<br/>.PHONY: $(PHONY)<br/>